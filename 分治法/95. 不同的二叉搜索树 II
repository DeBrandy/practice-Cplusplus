95. 不同的二叉搜索树 II
给你一个整数 n ，请你生成并返回所有由 n 个节点组成且节点值从 1 到 n 互不相同的不同 二叉搜索树 。可以按 任意顺序 返回答案。
示例一 ：
输入：n = 3
输出：[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]

解答：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(!n){
            return {};
        }
         return generateTrees(1, n);
    }
    vector<TreeNode*> generateTrees(int start ,int end){
        if(start>end){
            return {nullptr};
        }
        vector<TreeNode*> allTrees;
        for(int i=start;i<=end;i++){
            vector<TreeNode*> leftTrees = generateTrees(start,i-1);
            vector<TreeNode*> rightTrees = generateTrees(i+1,end);
            for(auto& left:leftTrees){
                for(auto& right:rightTrees){
                    TreeNode* currTree = new TreeNode(i,left,right);
                    allTrees.emplace_back(currTree);
                }
            }
        }
        return allTrees;
    }
};

总结：二叉搜索树的根节点永远小于左节点、大于右节点，所以变成一个小问题：建立根节点，把左边的数字作为左节点，右边的数字作为右节点，递归再组合。
